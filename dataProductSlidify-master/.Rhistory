data(diamond)
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y~x)
e <- resid(fit)
yhat<- predict(fit)
max(abs( e - (y-yhat)))
max(abs( e - (y - coef(fit)[1] - coef(fit)[2] * x)))
fit
resid(fit)
mean(e)
max(abs( e - (y-yhat)))
max(abs( e - (y - coef(fit)[1] - coef(fit)[2] * x)))
mean(y-yhat)
mean(y-yhat) > 0.1
mean(y-yhat) < 0.1
mean(e)
testx <- c(2,4,5,7,11,28)
testy <- c(8,22,35,51,66,128)
test.fit <- lm(testy~testx)
test.fit
resid(test.fit)
e <- resid(test.fit)
test.yhat <- predict(test.fit)
test.fit
predicted <- (testy*coef(test.fit)[2])+coef(test.fit[1])
test.yhat
predicted
yhat_pred <- predict(test.fit, testx)
?predict
yhat_pred <- predict(testx, test.fit)
yhat_pred <- predict(testx, data.frame(test.fit))
yhat_pred <- predict(testx, as.data.frame(test.fit))
yhat_pred <- predict(test.fit, data.frame(testx))
yhat_pred <- predict(testx, test.fit)
require(utils)
yhat_pred <- predict(test.fit, data.frame(testx))
library(utils)
yhat_pred
predicted
yhat_pred <- predict(test.fit, data.frame(testx))
predicted <- (testy*coef(test.fit)[2])+coef(test.fit[1])
yhat_pred
predicted
testy*coef(test.fit)[2]
test.yhat
(coef(test.fit)[2])+coef(test.fit[1])
(1*coef(test.fit)[2])+coef(test.fit[1])
(1*coef(test.fit)[2])
coef(test.fit)[1]
yhat_pred <- predict(test.fit, data.frame(testx))
predicted <- (testy*coef(test.fit)[2])+coef(test.fit)[1]
predicted
yhat_pred
(6*coef(test.fit)[2])+coef(test.fit)[1]
(28*coef(test.fit)[2])+coef(test.fit)[1]
e <- resid(test.fit)
test.yhat <- predict(test.fit)
yhat_pred <- predict(test.fit, data.frame(testx))
predicted <- (testx*coef(test.fit)[2])+coef(test.fit)[1]
test.yhat
yhat_pred
predicted
e2 <- testy-test.yhat
e2
e
mean(e2)
sum(e2)
testx
testy
testx*testy
sum(e*testx)
e*testx
e
testx
e
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y~x)
e <- resid(fit)
yhat<- predict(fit)
max(abs( e - (y-yhat)))
max(abs( e - (y - coef(fit)[1] - coef(fit)[2] * x)))
e
max(e)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex=1.1, pch=21, frame=FALSE)
abline(fit, lwd=2)
for (i in 1:n){
lines( c(x[i],x[i]), c(y[i],yhat[i]),
col="red", lwd=2)
}
?lines
?cex
?plot
plot(x, e,
xlab="Mass (carats)",
ylab="Residuals (SIN$)",
bg="lightblue",
col="black", cex=2, pch=21, frame=FALSE)
abline(h=0, lwd=2)
for (i in 1:n){
lines( c(x[i],x[i]), c(e[i],0), col="red", lwd=2)
}
plot(x, e,
xlab="Mass (carats)",
ylab="Residuals (SIN$)",
bg="lightblue",
col="black", cex=2, pch=21, frame=FALSE)
abline=(0, lwd=2)
abline=(a=0, lwd=2)
abline=(h=0, lwd=2)
abline(0, lwd=2)
abline(a=0, lwd=2)
abline(h=0, lwd=2)
abline(v=0, lwd=2)
abline(v=0.23, lwd=2)
?abline
x = runif(100, -3, 3)
y = x + sin(x)+rnorm(100, sd=0.2)
library(ggplot2)
g <- ggplot(data.frame(x=x, y=y), aes(x=x, y=y))
g
g <- ggplot(data.frame(x=x, y=y), aes(x=x, y=y))
g <- g + geom_smooth(method="lm", colour="black")
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g
g <- ggplot(data.frame(x=x, y=resid(lm(y~x))), aes(x=x, y=y))
g <- g + geom_hline(yintercept=0, size=2);
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + xlab("X") + ylab("Residual")
g
g <- ggplot(data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond))), aes(x=carat, y=price))
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_smooth(method="lm", colour"black")
g
diamond$carat
data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond)))
g <- ggplot(data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond))), aes(x=x, y=y))
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_smooth(method="lm", colour"black")
g
g <- ggplot(data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond))), aes(x=x, y=y))
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_smooth(method="lm", colour="black")
g
g <- ggplot(data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond))), aes(x=x, y=y))
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_hline(yintercept=0, size=2)
g
g <- ggplot(data.frame(x=diamond$carat, y=resid(lm(price~carat, diamond))), aes(x=x, y=y))
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_hline(yintercept=0, size=1)
g
diamond$e <- resid(lm(price~carat, diamond))
g <- ggplot(diamond, aes(x=carat, y=e))
g <- g + xlab("Mass (carats)")
g <- g + ylab("Residual price (SIN $)")
g <- g + geom_point(size=7, colour="black", alpha=0.4)
g <- g + geom_point(size=5, colour="red", alpha=0.4)
g <- g + geom_hline(yintercept=0, size=1)
g
testx
lm(testx~1)
lm(testx)
lm(testy~textx)
lm(testy~testx)
lm(testy~testx-1)
mean(diamond$price)
lm(price~mean(diamond$price))
lm(diamond$price~mean(diamond$price))
f <- rep(mean(diamond$price), nrow(diamond))
f
lm(diamond$price ~ f)
resid(lm(price~1, data=diamond))
lm(price~, data=diamond)
lm(price ~ 1, data=diamond)
mean(diamond$price)
resid( lm(price~1, data=diamond))
e = c( resid( lm(price~1, data=diamond)),
resid( lm(price~carat, data=diamond)))
fit <- factor( c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
fit
g <- ggplot( data.frame(e=e, fit=fit), aes(y=e, x=fit, fill=fit))
g <- g + geom_dotplot(binaxis="y", size=2, stackdir="center", binwidth=2)
g <- g + xlab("fitting approach")
g <- g + ylab("residual price")
g
g <- ggplot( data.frame(e=e, fit=fit), aes(y=e, x=fit, fill=fit))
g <- g + geom_dotplot(binaxis="y", size=2, stackdir="center", binwidth=10)
g <- g + xlab("fitting approach")
g <- g + ylab("residual price")
g
g <- ggplot( data.frame(e=e, fit=fit), aes(y=e, x=fit, fill=fit))
g <- g + geom_dotplot(binaxis="y", size=2, stackdir="center", binwidth=20)
g <- g + xlab("fitting approach")
g <- g + ylab("residual price")
g
library(UsingR)
data(diamond)
#Getting Residual Variation out of linear model 'lm' fit
y <- diamond$price
x <- diamond$carat
n <- length(y)
fit <- lm(y~x)
summary(fit)$sigma
sqrt( sum(resid(fit)^2) / (n-2))
summary(fit)
data(anscombe); example(anscombe)
?sig
e
e^2
exp(1)
sigmoid <- function(x){
1 / (1 - e^-exp(x))
}
sigmoid(3)
sigmoid <- function(x){
1 / (1 - exp(-x))
}
sigmoid(3)
x <- -100:100
x
plot(x,sigmoid(x))
x = -10:10
plot(x,sigmoid(x))
sigmoid(x)
sigmoid(-6)
1:10:0.1
1:10:1
0.1:10
n=100; x=rnorm(n); x2=rnorm(n); x3=rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd=.1)
ey = resid( lm(y ~ x2 + x3) )
ex = resid( lm(x ~ x2 + x3) )
sum(ey*ex) / sum(ex^2)
coef ( lm(y~x+x2+xe) )
sum(ey*ex) / sum(ex^2)
coef ( lm(y~x+x2+x3) )
require(datasets); data(swiss); ?swiss
str(swiss)
hist(swiss$Fertility)
?hist
require(GGally); require(ggplot2);
?ggpair
?ggpairs
?ggpairs
g = ggpairs(swiss, lower=list(continuous="smooth"), params=c(method="loess"))
install.packages(GGally)
install.packages("GGally")
require(GGally)
?ggpairs
g = ggpairs(swiss, lower=list(continuous="smooth"), params=c(method="loess"))
g
summary( lm(Fertility ~ ., data=swiss) )$coefficients
x <- c(1,2,3,4,5)
y <- c(10,8,12,16,20)
fit <- lm(y~x)
summary(fit)$coefficient
r <- cor(x,y)
r
?pred
?predict
y.predicted <- predict(fit, x)
x <- c(1,2,3,4,5)
y <- c(10,8,12,16,20)
fit <- lm(y~x)
summary(fit)$coefficient
r <- cor(x,y)
r
y.predicted <- predict(fit, x)
fit
predict(fit,x)
x
predict(fit,data.frame(x))
2.8*1 + 4.8
resid <- y.predicted - y
y.predicted <- predict(fit, data.frame(x) )
resid <- y.predicted - y
resid
mean(resid)
sum(resid)
2**2
2^2
square(2)
y.mean <- mean(y)
var.total <- sum( (y - y.mean)^2 )
# Explained Variation = sum of squared difference of predicted outcome and mean of the observed outcome
var.explained <- sum( (y.predicted - y.mean)^2 )
# Unexplained Variation = Total variation - Explained variation
var.unexplained <- var.total-var.explained
var.unexplained
var.explained
var.unexplained
var.total
summary(fit)
resid(fit)
sum(resid(fit))
r2 <- var.explained/var.total
r2
r
r^2
stdError = sqrt(sum((y-y.predicted)^2)/(n-2))
stdError
summary(fit)
resid(fit)^2
sum(resid(fit)^2)/(3)
0.6928*2
fit
summary(fit)
stdError
2.2978+0.6928
y
y.predicted
y-y.predicted
(y-y.predicted)^2
sum((y-y.predicted)^2)
14.4/3
sart(4.8)
sqrt(4.8)
fit
x
x*2.8
y_x <- x*2.8
theSum <- sum((y_x-y)^2)
len(x)
length(x)
theSum/length(x)
sqrt(theSum/length(x))
load(data)
?load
mpg
mtcar
mtcars
ggpairs
ggpairs(mtcars)
require(GGally)
ggpairs(mtcars)
mean(velvet_NG50)
velvet_NG50 <- c(423,359,244,457,407)
trinity_NG50 <- c(1905, 1283, 828, 884, 1504)
proposed_NG50 <- c(180.87, 173.21, 173.08, 165.37, 175.25)
proposed_improved_NG50 <- c(302, 271, 259, 230, 285)
mean(velvet_NG50)
mean(trinity_NG50)
mean(proposed_NG50)
mean(proposed_improved_NG50)
proposed_velvet_ratio <- velvet_NG50 / proposed_NG50
proposed_velvet_ratio
t.test(proposed_velvet_ratio, y=NULL, alternative("less"),
mu = 6.5, conf.level=0.95)
t.test(proposed_velvet_ratio, y=NULL, alternative="less",
mu = 6.5, conf.level=0.95)
t.test(proposed_velvet_ratio, y=NULL, alternative="less",
mu = 6.5, conf.level=0.99)
mean(proposed_velvet_ratio)
sd(proposed_velvet_ratio)
qt(0.01, df=4)
0.4977/sqrt(5)
(2.1814-6.5)/0.223
?qt
pt(-19.40)
pt(-19.40, df=4)
pt(3.347, df=4)
2.776*0.223
0.619-2.1814
-0.619-2.1814
sampleMEAN <- mean(proposed_velvet_ratio)
sampleSD <- sd(proposed_velvet_ratio)
n <- 5
error <- qt(0.95, df=n-1)* (sampleSD/sqrt(n))
lower <- sampleMEAN - error
upper <- sampleMEAN + error
lower
upper
install.packages('caret')
library(caret)
library(caret)
install.packages('caret')
library(caret)
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
length(names(training))
length(names(spam))
mean(training$capitalAve)
sd(training$capitalAve)
summary(training$capitalAve)
length(training$capitalAve)
training$capitalAve > 1000
training$capitalAve[training$capitalAve > 1000]
training$capitalAve[training$capitalAve > 500]
training$capitalAve[training$capitalAve > 100]
median(training$capitalAve)
mean(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAve <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
summary(trainCapAve)
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
sd(trainCapAveS)
mean(trainCapAve)
mean(trainCapAveS)
a = c(1,2,3,4,5)
b = a - mean(a)
mean(b)
mean(a)
a = c(1,3,5,7)
b = a- mean(a)
mean(b)
mean(a)
a = c(1,3,5,9)
b = a- mean(a)
mean(b)
mean(a)
preObj <- preProcess(training[,-58], method=c("center", "scale"))
dim(preObj)
preObj$dim
?"predict"
trainCapAveS <- predict(preObj, training[,-58])$capitalAve
train_transformed <- predict(preObj, training[,-58])
CapAveS_trans <- train_transformed$capitalAve
mean(CapAveS_trans)
test_transformed <- predict(preObj, testing[,-58])
CapAveS_test_trans <- test_transformed$capitalAve
mean(CapAveS_test_trans)
set.seed(32343)
modelFit <- train(type ~ ., data=training,
preProcess=c("center","scale"), method="glm")
install.packages('e1071')
set.seed(32343)
modelFit <- train(type ~ ., data=training,
preProcess=c("center","scale"), method="glm")
warning()
warnings()
warnings(modelFit)
modelFit
preObj_boxCox <- preProcess(training[,-58], method=c("BoxCox"))
train_transformed1 <- predict(preObj_boxCox, training[,-58])
trainCapAvS <- train_transformed1$capitalAve
par(mfrow=c(1,2)); hist(trainCapAvS); qqnorm(trainCapAvS)
sample <- training$capitalAve
sample
mean(sample)
?rbinom
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.05)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=0.5)
rbinom(5, size=1, prob=1)
3 choose 3
choose(3,3)
choose(3,0)
training$capAve <- training$capitalAve
selectNA <- rbinom(dim(training)[1], size=1, prob=0.05)==1
selectNA
preObj <- preProcess(training[,-58], method="knnImpute")
capAve <- predict(preObj, training[,-58])$capAve
capAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
capAveTruth <- training$capitalAve
capAveTruth <- (capAveTruth-mean(capAveTruth))/sd(capAveTruth)
quantile(capAve - capAveTruth)
quantile((capAve-capAveTruth)[selectNA])
?quantile
a = c(1,1,1,2,2,2,2,2,2,3)
quantile(a)
summary(a)
?quantile
seq(0,1,0.1)
o <- c(.03, .24, .41, .59, .67)
o
seq(0.1, 0.9, 0.2)
quantile(o, probs=seq(0.1,0.9,0.2))
quantile(o)
setwd("~/Google Drive/Post_Graduate/Data_Production/Project/my_Slidify/Coursera Student")
library(devtools)
library(slidify)
publish_github(user="kenneth.g.shim@gmail.com", repo="Data_Product_Slidify")
